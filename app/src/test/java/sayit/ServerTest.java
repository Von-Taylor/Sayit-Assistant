/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sayit;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;

import org.junit.jupiter.api.Test;

import sayit.Server.MockServer;
import sayit.Server.BusinessLogic.Prompt;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import java.util.ArrayList;

public class ServerTest {
    private final String FILE_EMPTY_PATH = "src/test/java/sayit/Test-files/empty.txt";
    private final String FILE_TEST3_PATH = "src/test/java/sayit/Test-files/test-3.txt";
    private final String loadPURL = "http://localhost:8100/load";
    private final String newQURL = "http://localhost:8100/newQuestion";
    private final String clearAURL = "http://localhost:8100/clearAll";
    private final String deletePURL = "http://localhost:8100/deletePrompt";

    

    @AfterEach
    void closeServer() throws IOException {
        MockServer.stopServer();
    }

    @Test
    void loadPromptsHandlerGetTest() throws IOException, InterruptedException {
        // start the server and fill its prompts with this file
        MockServer.startServer(FILE_TEST3_PATH);

        // get the prompt at 0th index on the server
        URL url = new URL(loadPURL + "?=" + 0);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");
        BufferedReader in = new BufferedReader(
            new InputStreamReader(conn.getInputStream())
        );
        String response = in.readLine();
        in.close();
        String question = response.substring(0,response.indexOf("/D\\"));
        String answer = response.substring(response.indexOf("/D\\") + 3);

        // compare it to expected Q&A
        //assertEquals("What's the best ice cream flavor", question);
        // assertEquals("Obviously it's cookie's and cream", answer);


        // get the prompt at 1st index on the server
        url = new URL(loadPURL + "?=" + 1);
        conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");
        in = new BufferedReader(
            new InputStreamReader(conn.getInputStream())
        );
        response = in.readLine();
        in.close();
        question = response.substring(0,response.indexOf("/D\\"));
        answer = response.substring(response.indexOf("/D\\") + 3);

        // compare it to expected Q&A
        // assertEquals("Cats or dogs", question);
        // assertEquals("Dogs are more easily manipulatable so I'd choose them", answer);


        // get the prompt at 2nd index on the server
        url = new URL(loadPURL + "?=" + 2);
        conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");
        in = new BufferedReader(
            new InputStreamReader(conn.getInputStream())
        );
        response = in.readLine();
        in.close();
        question = response.substring(0,response.indexOf("/D\\"));
        answer = response.substring(response.indexOf("/D\\") + 3);

        // compare it to expected Q&A
        // assertEquals("Would you go out on a date with me", question);
        // assertEquals("Unfortunaley I can not, but I would reccommend going outside and touching some grass", answer);


        // get the prompt at 3rd index (non-existent) on the server
        url = new URL(loadPURL + "?=" + 3);
        conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");
        in = new BufferedReader(
            new InputStreamReader(conn.getInputStream())
        );
        response = in.readLine();
        in.close();

        // compare it to expected Q&A
        // assertEquals("-1", response);
    }

    @Test
    void newQuestionHandlerGetTest() throws IOException, InterruptedException {
        // start the server and fill its prompts with this file
        MockServer.startServer(FILE_EMPTY_PATH);

        // get Q&A from (mocked) ChatGPT on server
        String query = "Start";
        URL url = new URL(newQURL + "?=" + query);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");
        BufferedReader in = new BufferedReader(
            new InputStreamReader(conn.getInputStream())
        );
        String response = in.readLine();
        in.close();

        // make sure correct response was received
        assertEquals("Recording Successfully", response);

        query = "Stop";
        url = new URL(newQURL + "?=" + query);
        conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");
        in = new BufferedReader(
            new InputStreamReader(conn.getInputStream())
        );
        response = in.readLine();
        in.close();
        String question = response.substring(0,response.indexOf("/D\\"));
        String answer = response.substring(response.indexOf("/D\\") + 3);

        // compare it to expected Q&A
        assertEquals("This is the mock question?", question);
        assertEquals("This is the mock answer!!! :)", answer);
    }

    @Test
    void newQuestionHandlerPostTest() throws IOException, InterruptedException {
        // start the server and fill its prompts with this file
        MockServer.startServer(FILE_EMPTY_PATH);
        
        // add 2 prompts to server
        Prompt p1 = new Prompt("Is the ocean a soup?", "Whatever makes you happy.");
        URL url = new URL(newQURL);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("POST");
        conn.setDoOutput(true);
        OutputStreamWriter out = new OutputStreamWriter(
            conn.getOutputStream()
        );
        out.write(p1.getQuery() + "\n" + p1.getAnswer());
        out.flush();
        out.close();
        BufferedReader in = new BufferedReader(
            new InputStreamReader(conn.getInputStream())
        );
        String line;
        String response = "";
        while ((line = in.readLine()) != null) {
            response += line + "\n";
        }
        response = response.trim();
        in.close();

        // make sure correct response was received
        assertEquals("Posted entry:" + "\nQuestion: " + p1.getQuery() + "\nAnswer: " + p1.getAnswer(), response);

        Prompt p2 = new Prompt("What's red and bad for your teeth?", "A brick.");
        url = new URL(newQURL);
        conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("POST");
        conn.setDoOutput(true);
        out = new OutputStreamWriter(
            conn.getOutputStream()
        );
        out.write(p2.getQuery() + "\n" + p2.getAnswer());
        out.flush();
        out.close();
        in = new BufferedReader(
            new InputStreamReader(conn.getInputStream())
        );
        response = "";
        while ((line = in.readLine()) != null) {
            response += line + "\n";
        }
        response = response.trim();
        in.close();

        // make sure correct response was received
        assertEquals("Posted entry:" + "\nQuestion: " + p2.getQuery() + "\nAnswer: " + p2.getAnswer(), response);


        // get the prompt at 0th index on the server
        url = new URL(loadPURL + "?=" + 0);
        conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");
        in = new BufferedReader(
            new InputStreamReader(conn.getInputStream())
        );
        response = in.readLine();
        in.close();
        String question = response.substring(0,response.indexOf("/D\\"));
        String answer = response.substring(response.indexOf("/D\\") + 3);

        // compare it to expected Q&A
        assertEquals(p1.getQuery(), question);
        assertEquals(p1.getAnswer(), answer);


        // get the prompt at 1st index on the server
        url = new URL(loadPURL + "?=" + 1);
        conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");
        in = new BufferedReader(
            new InputStreamReader(conn.getInputStream())
        );
        response = in.readLine();
        in.close();
        question = response.substring(0,response.indexOf("/D\\"));
        answer = response.substring(response.indexOf("/D\\") + 3);

        // compare it to expected Q&A
        assertEquals(p2.getQuery(), question);
        assertEquals(p2.getAnswer(), answer);
    }

    @Test
    void deletePromptHandlerDeleteTest() throws IOException, InterruptedException {
        // start the server and fill its prompts with this file
        MockServer.startServer(FILE_TEST3_PATH);

        // delete the second prompt on server
        String query = String.valueOf(1);
        URL url = new URL(deletePURL + "?=" + query);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("DELETE");
        BufferedReader in = new BufferedReader(
            new InputStreamReader(conn.getInputStream())
        );
        String line;
        String response = "";
        while ((line = in.readLine()) != null) {
            response += line + "\n";
        }
        response = response.trim();
        in.close();

        // make sure correct response was received
        //assertEquals("Deleted at index: " + 1 + "\nQuestion: " + "Cats or dogs" + "\nAnswer: " + "Dogs are more easily manipulatable so I'd choose them", response);


        // delete the second prompt on server again
        query = String.valueOf(1);
        url = new URL(deletePURL + "?=" + query);
        conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("DELETE");
        in = new BufferedReader(
            new InputStreamReader(conn.getInputStream())
        );
        response = "";
        while ((line = in.readLine()) != null) {
            response += line + "\n";
        }
        response = response.trim();
        in.close();

        // make sure correct response was received
        // assertEquals("Deleted at index: " + 1 + "\nQuestion: " + "Would you go out on a date with me" + "\nAnswer: " + "Unfortunaley I can not, but I would reccommend going outside and touching some grass", response);


        // get the second prompt on server (non-existent)
        url = new URL(loadPURL + "?=" + 1);
        conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");
        in = new BufferedReader(
            new InputStreamReader(conn.getInputStream())
        );
        response = in.readLine();
        in.close();

        // compare it to expected Q&A
        // assertEquals("-1", response);
    }

    @Test
    void clearAllHandlerDeleteTest() throws IOException, InterruptedException {
        // start the server and fill its prompts with this file
        MockServer.startServer(FILE_TEST3_PATH);
        
        // clear all prompts on the server
        URL url = new URL(clearAURL);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("DELETE");
        BufferedReader in = new BufferedReader(
            new InputStreamReader(conn.getInputStream())
        );
        String response = in.readLine();
        in.close();

        // make sure correct response was received
        assertEquals("Cleared all prompts", response);


        // get the first prompt on server (non-existent)
        url = new URL(loadPURL + "?=" + 0);
        conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");
        in = new BufferedReader(
            new InputStreamReader(conn.getInputStream())
        );
        response = in.readLine();
        in.close();

        // compare it to expected Q&A
        assertEquals("-1", response);
    }
}
