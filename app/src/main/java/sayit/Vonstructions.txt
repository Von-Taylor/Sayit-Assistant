Refactoring to 3-tier architecture:
- move all business logic to server 
    x- bring back file preservation, but do it on the server
    - make different contexts for each functionality (different requestHandler for each)
        x- /loadPrompts
        x- /newQuestion 
        x- /deletePrompt
        x- /clearAll
        - /createEmail
        - /sendEmail
x- make UI only show buttons, and prompts retreived from server
    x- should no longer store anything 
    x- buttons/functionalities should just be: 
        x- making a request (which changes the prompts on the server) 
        x- receving back a string response (used to update the UI)
x- Only App, AppFrame, Footer, and ScrollFrame are needed for UI
x- Rest of the classes should be doing stuff on the server


In loadPromptsHandler (update):
    x- update handlePut() (after making devHandler), that will read in an email and password and check if they're valid:
        x- if they are, do Cristian's reading mango in there to fill prompts (move the restore() in Server into there)
            x- store the email into the StringBuilder email
            x- return "Valid Login" response 
        x- otherwise, return "Invalid Login"
    - also update handlePut() that will read a query
        - if the query says "autoLogin", check if the IP of the computer exists in the database
            - if it does, 
                - store the email associated with that IP into StringBuilder email
                - do Cristian's reading mongo thing to fill prompts
                x- return "Automatic Login"
            x- if it doesn't,
                x- return "No Automatic Login"
    - also update handlePut() that will read a different query
        - if the query says "addLogin", 
            - read from file to get IP and email from request
            - store that email into StringBuilder email
                - create a new User with the IP and email in the Mongo Users collection
                - return "Added AutoLogin"
    x- create handlePost() that will read in an email and password and check if the email already exists:
        x- if it does, return "Email already used"
        x- if it doesn't, 
            x- ask Cristian how to add that email and password as a new entry into mongo
            x- store the email into the StringBuilder email
            x- return "Account Created"
    x- update handleGet() to write the prompts to the database under the email that is currently logged into


In createEmailHandler:
    - (similar to newQH handlePut()) create a handlePut() method that does the following:
        - read the email subject from the input file
        - call makeAnswer() from OutputA to get ChatGPT response
        - add (the command), the email subject, then the ChatGPT response to prompts
        - Optional: print - "createEH: " + response
        - return response (which should be the ChatGPT's answer/reponse from makeAnswer())


In AppFrame:
    - create the createEmail(String subject) function
        - request handlePut() in createEH and input the subject into it
        - read its response (like it was done in newQuestion())
        - add (the command), the subject, and the response into the scrollFrame
    - parse the response from startHandler to also look for "create email"
    - call createEmail(String subject) and pass in the rest of the response after "create email" (the subject) into it


In Prompts:
    - change constructor to know have strings command, question, and answer
        - optional: change question to top, and answer to bottom
    - have to now fix everywhere where Prompt is used
    - also have to do ethan's UI thing to include the command
    

Where ever ethan made his changes:
    - request loadPH handlePut() with query = "autoLogin"
        - if the response says "Automatic Login", move on to homepage
        - otherwise if the response says "No Automatic Login",
            x- stay on account login page and call loadPH handlePut() w/o query and input the email and password from user into it
