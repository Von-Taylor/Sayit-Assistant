/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sayit;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseListener;
import java.util.ArrayList;

import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.Border;
import javax.swing.*; 

import org.json.JSONArray;
import org.json.JSONObject;

// Add Header Class

/**
 * Panel for footer of app that will contain buttons for recording and clearing
 * prompts
 */
class Footer extends JPanel {
  private JButton clearSelectedButton;
  private JButton newButton;
  private JButton clearButton;

  Color backgroundColor = new Color(50, 205, 50);

  /**
   * Default constructor that sets up Footer panel in app
   */
  Footer() {
    this.setPreferredSize(new Dimension(400, 60));
    this.setBackground(backgroundColor);
    // Set the layout of the footer to a GridLayout with 1 row and 2 columns
    GridLayout layout = new GridLayout(1, 2);
    this.setLayout(layout);

    // add new question button to footer
    newButton = new JButton("New Question");
    newButton.setFont(new Font("Sans-serif", Font.ITALIC, 20));
    this.add(newButton);

    // add clear button to footer
    clearButton = new JButton("Clear All");
    clearButton.setFont(new Font("Sans-serif", Font.ITALIC, 20));
    this.add(clearButton);

    // add clear selected button to footer
    clearSelectedButton = new JButton("Clear Selected");
    clearSelectedButton.setFont(new Font("Sans-serif", Font.ITALIC, 20));
    this.add(clearSelectedButton);
  }

  /**
   * Getter for newButton
   * 
   * @return JButton of the newButton button in Footer
   */
  public JButton getNewButton() {
    return newButton;
  }

  /**
   * Getter for clearButton
   * 
   * @return JButton of the clearButton button in Footer
   */
  public JButton getClearButton() {
    return clearButton;
  }

  /**
   * Getter for clearSelectedButton
   * 
   * @return JButton of the clearButton button in Footer
   */
  public JButton getClearSelectedButton() {
    return clearSelectedButton;
  }

}

class Prompt extends JPanel {

    //Get Icon
    // Load the icon image from a file
    ImageIcon icon = new ImageIcon("src/resources/delete.png");
    ImageIcon deleteSelectIcon = new ImageIcon("src/resources/deleteSelected.png");

    // Scale the icon image to fit the button
    Image scaledImage = icon.getImage().getScaledInstance(20, 20, Image.SCALE_SMOOTH);
    Image scaledDeleteSelect = deleteSelectIcon.getImage().getScaledInstance(20, 20, Image.SCALE_SMOOTH);
    ImageIcon deleteSelectScaled = new ImageIcon(scaledDeleteSelect);
    ImageIcon scaledIcon = new ImageIcon(scaledImage);
    
    private boolean selected;
    private JTextArea queryField;
    private JTextArea answerField;
    JButton deleteButton;

    Color pink = new Color(227, 179, 171);
    Color blue = new Color(171, 219, 227);

    Prompt(String query, String answer) {

      this.selected = false;

      this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));

      // Format Query Field as a textbox
      queryField = new JTextArea(query);
      queryField.setBackground(pink);
      queryField.setFont(new Font("Arial", Font.PLAIN, 14));
      queryField.setWrapStyleWord(true);
      queryField.setLineWrap(true);
      queryField.setEditable(false);

      // Make it so that there is some space between the text and the border line
      Border paddingBorder1 = BorderFactory.createEmptyBorder(5, 5, 5, 5);
      Border compoundBorder1 = BorderFactory.createCompoundBorder(queryField.getBorder(), paddingBorder1);
      queryField.setBorder(compoundBorder1);

      // To store the delete button and query text
      Border queryPanelBorder = BorderFactory.createMatteBorder(1, 1, 0, 1, Color.BLACK);
      JPanel queryPanel = new JPanel(new BorderLayout());
      queryPanel.add(queryField, BorderLayout.CENTER);
      queryPanel.setBorder(queryPanelBorder);

      // Make delete button
      deleteButton = new JButton(scaledIcon);
      deleteButton.setPreferredSize(new Dimension(20, 20));
      deleteButton.setIcon(scaledIcon);
      deleteButton.setBorder(BorderFactory.createEmptyBorder());
      deleteButton.setFocusPainted(false);

      deleteButton.addActionListener(e -> {
        if (selected) {
            deleteButton.setIcon(scaledIcon);
            this.selected = false;
            revalidate();
        } else {
            deleteButton.setIcon(deleteSelectScaled);
            this.selected = true;
            revalidate();
        }
    });

      // Create a new JPanel to hold the delete button and set its preferred size
      JPanel deletePanel = new JPanel();
      deletePanel.setPreferredSize(new Dimension(25, 25));
      deletePanel.add(deleteButton);
      deletePanel.setBackground(pink);
      deletePanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 5));

      queryPanel.add(deletePanel, BorderLayout.EAST);
      queryPanel.setBackground(pink);
      
      // Format Answer Field as a text box
      answerField = new JTextArea(answer);
      answerField.setBorder(BorderFactory.createLineBorder(Color.BLACK));
      answerField.setBackground(pink);
      answerField.setFont(new Font("Arial", Font.PLAIN, 12));
      answerField.setWrapStyleWord(true);
      answerField.setLineWrap(true);
      answerField.setEditable(false);
      answerField.setPreferredSize(new Dimension(200,50));

      // Make it so that there is some space between the text and the border line
      Border paddingBorder2 = BorderFactory.createEmptyBorder(5, 5, 5, 5);
      Border compoundBorder2 = BorderFactory.createCompoundBorder(answerField.getBorder(), paddingBorder2);
      answerField.setBorder(compoundBorder2);
      
      // Add text fields to prompt box
      this.add(queryPanel, BorderLayout.NORTH);
      this.add(answerField, BorderLayout.CENTER);

      // Format prompt box with some padding
      Border border = BorderFactory.createLineBorder(Color.BLACK);
      setBorder(BorderFactory.createCompoundBorder(border, 
                BorderFactory.createEmptyBorder(10, 10, 10, 10)));
      this.setBackground(blue);

      this.revalidate();
    }

    public boolean getState() {
        return this.selected;
    }

    public JButton getDelete() {
      return deleteButton;
    }
}

class ScrollFrame extends JFrame {

    private final String FILE_PATH = "src/main/java/sayit/Test-files/test-1.txt";
    private GetPromptHistory history = new GetPromptHistory(FILE_PATH);
    private ArrayList<Prompt> prompts = new ArrayList<Prompt>();
    private JPanel contentPane;
    private JScrollPane scrollPane;
  
    public ScrollFrame() {
      
      setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      setTitle("Prompt History");
      
      // Create the content pane
      contentPane = new JPanel();
      contentPane.setLayout(new BoxLayout(contentPane, BoxLayout.Y_AXIS));
      contentPane.setBackground(Color.BLUE);
      
      // Add multiple prompt objects to the content pane
      for (int i = 0; i < history.getSize(); i++) {
          Prompt prompt = new Prompt(history.getQuery(i), history.getAnswer(i));
          prompts.add(prompt);
          contentPane.add(prompt);
      }

      // Display the contents and enable scrolling
      scrollPane = new JScrollPane(contentPane);
      scrollPane.setPreferredSize(new Dimension(400, 400));
      scrollPane.getVerticalScrollBar().setUnitIncrement(15);
      setContentPane(scrollPane);

      pack();
    }

    void addPrompt(String question, String answer) {
      Prompt prompt = new Prompt(question, answer);
      history.addPrompt(question, answer);
      contentPane.add(prompt);
    }

    public void removeSelectedPrompts() {
      for (Prompt c : prompts) {
        if (((Prompt) c).getState()) {
          contentPane.remove(c); // remove the component
        }
        contentPane.revalidate();
        contentPane.repaint();
      }
    }
  }

  /**
   * Put JPanels on AppFrame and make listeners for buttons
   */
  class AppFrame extends JFrame {
    // put all JPanels here
    private ScrollFrame scrollFrame;
    private Footer footer;

    // put all buttons used in app here
    private JButton newButton;
    private JButton clearButton;
    private JButton clearSelectedButton;

    // other miscellaneous variables
    private boolean isRecording = false;
    Color black = new Color(0, 0, 0);
    Color red = new Color(255, 0, 0);
    Color pink = new Color(227, 179, 171);

    public AppFrame() {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setTitle("SayIt");
        setSize(400, 600);

        // Create a new ScrollFrame
        scrollFrame = new ScrollFrame();
        // Create a new Footer
        footer = new Footer();

        // Make the main part of the frame the scrollFrame
        this.add(scrollFrame.getContentPane(), BorderLayout.CENTER);
        // Add footer on bottom of the screen
        this.add(footer, BorderLayout.SOUTH);
        this.setBackground(pink);

        setVisible(true);

        // make functionality for buttons
        newButton = footer.getNewButton();
        clearButton = footer.getClearButton();
        clearSelectedButton = footer.getClearSelectedButton();
        addListeners();
    }


    /**
     * Create functionality for when the new and clear buttons are pressed
     */
    public void addListeners() {
      // start or stop recording when new button is pressed
      AudioRecord audio = new AudioRecord();
      newButton.addActionListener(
        (ActionEvent e) -> {
          if (!isRecording) {
            newButton.setText("Stop Recording");
            newButton.setForeground(red);
            audio.startRecording();
          } else {
            newButton.setText("New Question");
            newButton.setForeground(black);
            audio.stopRecording();
            updateScrollFrame();
          }
          isRecording = !isRecording;
        }
      );

      // delete all prompts in prompt history when clear button is pressed
      clearButton.addActionListener(
        (ActionEvent e) -> {
          // TBD in iteration 2
        }
      );

      clearSelectedButton.addActionListener((ActionEvent e) -> {
        scrollFrame.removeSelectedPrompts();
        repaint();
      });
    }

    public void updateScrollFrame() {
      InputQ input = new InputQ();
      String question = input.getInputQ();
      OutputA output = new OutputA();
      String answer = output.getOutputA();
      scrollFrame.addPrompt(question, answer);
    }
}

public class App {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            new AppFrame();
          });
    }
}
